// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sidelight-labs/libhttp/tracing (interfaces: Tracer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tracing "github.com/sidelight-labs/libhttp/tracing"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Shutdown mocks base method.
func (m *MockTracer) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTracerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTracer)(nil).Shutdown))
}

// Trace mocks base method.
func (m *MockTracer) Trace(arg0 string) tracing.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", arg0)
	ret0, _ := ret[0].(tracing.Span)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTracerMockRecorder) Trace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTracer)(nil).Trace), arg0)
}
